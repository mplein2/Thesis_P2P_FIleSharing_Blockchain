Index: main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\r\nfrom json import *\r\nimport logging\r\nimport threading\r\nfrom pickle import dumps, loads\r\nfrom flask import Flask, render_template, request, redirect\r\nimport compress\r\nfrom Networking import receiver, sendRequest, JoinRequest\r\nfrom Groups import GroupManager, Invite\r\nfrom Client import Client\r\nimport easygui\r\nfrom bundles import BundleManager\r\n\r\napp = Flask(__name__)\r\n\r\n# This Disables Logging\r\napp.logger.disabled = False\r\nlog = logging.getLogger('werkzeug')\r\nlog.disabled = False\r\n\r\n\r\n# Routes\r\n@app.route(\"/\")\r\ndef index():\r\n    return render_template(\"index.html\", groups=groupManager.groups)\r\n\r\n\r\n@app.route(\"/groups\", methods=['GET'])\r\ndef groups():\r\n    group = request.args.get('group')\r\n    print(\"Group page request :\", group)\r\n    group = groupManager.getGroup(group)\r\n    return render_template(\"groups.html\", groups=groupManager.groups, group=group)\r\n\r\n\r\n@app.route('/start', methods=['POST', 'GET'])\r\ndef start():\r\n    print(\"Start Worked\")\r\n    # TODO Start downloading\r\n    return \"alright\"\r\n\r\n\r\n@app.route('/generateInvite', methods=['POST'])\r\ndef generateInvite():\r\n    if request.method == 'POST':\r\n        data = request.form\r\n        group = data[\"group\"]\r\n        print(str(group))\r\n        # TODO IP SPECIFIC BLOCKCHAIN\r\n        ip = data[\"ip\"]\r\n        print(\"Generate Invite for :\", group)\r\n        group = groupManager.getGroup(group)\r\n        print(group)\r\n        invite = group.generateInvite()\r\n        return compress.compress(invite.toJSON())\r\n\r\n\r\n@app.route('/joinGroup', methods=['POST'])\r\ndef joinGroup():\r\n    if request.method == 'POST':\r\n        data = request.form\r\n        invite = data[\"invite\"]\r\n        inviteDecomp = compress.decompress(invite)\r\n        inviteLoad = json.loads(inviteDecomp)\r\n        invite = Invite(inviteLoad[\"id\"],inviteLoad[\"name\"], inviteLoad[\"timestamp\"], inviteLoad[\"peers\"])\r\n        joinReq = JoinRequest(invite.name, invite.timestamp)\r\n        # TODO PORTS\r\n        print(invite.peers)\r\n        for peer in invite.peers:\r\n            print(peer[0])\r\n            res = sendRequest(peer[0], 6700, dumps(joinReq), groupManager)\r\n            group = res.group\r\n            group = Groups.Group(group.name,group.private,group.admins,group.peers,group.timestamp)\r\n            groupManager.addGroup(group)\r\n        return \"1\"\r\n\r\n\r\n@app.route('/shareBundle', methods=['POST'])\r\ndef shareBundle():\r\n    if request.method == 'POST':\r\n        data = request.form\r\n        name = data[\"bundleName\"]\r\n        desc = data[\"bundleDescription\"]\r\n        groupName = data[\"groupName\"]\r\n        print(name)\r\n        print(desc)\r\n        print(groupName)\r\n        path = easygui.diropenbox(msg=\"Select folder to share as bundle\", title=\"Share Bundle\")\r\n        bundle = bundleManager.createBundle(name,desc,path=path)\r\n        groupManager.addBundle(bundle,groupName)\r\n        return \"0\"\r\n\r\n@app.route('/searchBundles', methods=['POST'])\r\ndef searchBundles():\r\n    print(\"Search Bundles Route\")\r\n    if request.method == 'POST':\r\n        data = request.form\r\n\r\n        #Get Keywords from search\r\n        keywords = data[\"searchKeyWords\"].split()\r\n        print(keywords)\r\n\r\n        #Get Group\r\n        group = data[\"group\"]\r\n        group = groupManager.getGroup(group)\r\n        print(group)\r\n\r\n        joinReq = SearchBundleRequest(group.id,keywords)\r\n        responses = []\r\n        for peer in group.peers:\r\n            print(peer[0])\r\n            res = sendRequest(peer[0], 6700, dumps(joinReq), groupManager)\r\n            responses.append(res)\r\n        #WITH RESPONSES DO STUFF.\r\n        for x in responses:\r\n            print(x)\r\n\r\n\r\n\r\n\r\n        #Respond\r\n        return render_template(\"search.html\", groups=groupManager.groups, group=group)\r\n\r\n@app.route('/createGroup', methods=['POST'])\r\ndef createGroup():\r\n    if request.method == 'POST':\r\n        data = request.form\r\n        name = data[\"name\"]\r\n        if data[\"private\"]:\r\n            private = 1\r\n        else:\r\n            private = 0\r\n    if groupManager.createGroup(name, private, [client.publicIP]):\r\n        # True\r\n        return \"0\"\r\n    else:\r\n        # False\r\n        return \"1\"\r\n\r\n\r\n@app.route('/quitGroup', methods=['POST'])\r\ndef quitGroup():\r\n    print('QUIT GROUP REQ')\r\n    if request.method == 'POST':\r\n        data = request.form\r\n        group = data[\"group\"]\r\n        if groupManager.quitGroup(group):\r\n            # True\r\n            return \"0\"\r\n        else:\r\n            # False\r\n            return \"1\"\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    client = Client()\r\n    groupManager = GroupManager()\r\n    bundleManager = BundleManager()\r\n    receiver = threading.Thread(target=receiver, args=[groupManager])\r\n    receiver.start()\r\n    app.run(host='', port=6969)\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.py b/main.py
--- a/main.py	(revision f0294b2ecb648f959712af555b1864294106d67c)
+++ b/main.py	(date 1648481256246)
@@ -5,8 +5,8 @@
 from pickle import dumps, loads
 from flask import Flask, render_template, request, redirect
 import compress
-from Networking import receiver, sendRequest, JoinRequest
-from Groups import GroupManager, Invite
+from Networking import receiver, sendRequest, JoinRequest, SearchBundleRequest
+from Groups import GroupManager, Invite, Group
 from Client import Client
 import easygui
 from bundles import BundleManager
@@ -62,7 +62,7 @@
         invite = data["invite"]
         inviteDecomp = compress.decompress(invite)
         inviteLoad = json.loads(inviteDecomp)
-        invite = Invite(inviteLoad["id"],inviteLoad["name"], inviteLoad["timestamp"], inviteLoad["peers"])
+        invite = Invite(inviteLoad["id"], inviteLoad["name"], inviteLoad["timestamp"], inviteLoad["peers"])
         joinReq = JoinRequest(invite.name, invite.timestamp)
         # TODO PORTS
         print(invite.peers)
@@ -70,7 +70,7 @@
             print(peer[0])
             res = sendRequest(peer[0], 6700, dumps(joinReq), groupManager)
             group = res.group
-            group = Groups.Group(group.name,group.private,group.admins,group.peers,group.timestamp)
+            group = Group(group.name, group.private, group.admins, group.peers, group.timestamp)
             groupManager.addGroup(group)
         return "1"
 
@@ -86,41 +86,40 @@
         print(desc)
         print(groupName)
         path = easygui.diropenbox(msg="Select folder to share as bundle", title="Share Bundle")
-        bundle = bundleManager.createBundle(name,desc,path=path)
-        groupManager.addBundle(bundle,groupName)
+        bundle = bundleManager.createBundle(name, desc, path=path)
+        groupManager.addBundle(bundle, groupName)
         return "0"
 
+
 @app.route('/searchBundles', methods=['POST'])
 def searchBundles():
     print("Search Bundles Route")
     if request.method == 'POST':
         data = request.form
 
-        #Get Keywords from search
+        # Get Keywords from search
         keywords = data["searchKeyWords"].split()
         print(keywords)
 
-        #Get Group
+        # Get Group
         group = data["group"]
         group = groupManager.getGroup(group)
         print(group)
 
-        joinReq = SearchBundleRequest(group.id,keywords)
+        joinReq = SearchBundleRequest(group.id, keywords)
         responses = []
         for peer in group.peers:
             print(peer[0])
             res = sendRequest(peer[0], 6700, dumps(joinReq), groupManager)
             responses.append(res)
-        #WITH RESPONSES DO STUFF.
+        # WITH RESPONSES DO STUFF.
         for x in responses:
-            print(x)
-
-
-
+            print("Response:",x)
 
-        #Respond
+        # Respond
         return render_template("search.html", groups=groupManager.groups, group=group)
 
+
 @app.route('/createGroup', methods=['POST'])
 def createGroup():
     if request.method == 'POST':
Index: Networking.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import socket\r\nfrom socket import *\r\nimport pickle\r\nimport copy\r\nimport Groups\r\nfrom Groups import Group\r\n\r\n\r\nclass Request:\r\n    def __init__(self,type):\r\n        self.type = type\r\n\r\n    def toJSON(self):\r\n        return json.dumps(self.__dict__)\r\n\r\nclass JoinRequest(Request):\r\n    def __init__(self,name,timestamp):\r\n        super().__init__(1)\r\n        self.name = name\r\n        self.timestamp = timestamp\r\n\r\nclass JoinResponse(Request):\r\n    def __init__(self,group):\r\n        super().__init__(1)\r\n        self.group = group\r\n\r\nclass SearchBundleRequest(Request):\r\n    def __init__(self, groupId, keyword):\r\n        super().__init__(2)\r\n        self.groupID = groupId\r\n        self.keywords = keyword\r\n\r\nclass SearchBundleResponse(Request):\r\n    def __init__(self,groups):\r\n        super().__init__(2)\r\n        self.responseBundles = responseBundles\r\n\r\ndef requestHandler(data, addr, groupManager: Groups.GroupManager):\r\n    req = pickle.loads(data)\r\n    # Response to JoinRequest\r\n    if req.type == 1:\r\n        req = JoinRequest(req.name,req.timestamp)\r\n        #TODO If this is allowed add peer and respond\r\n        #TODO Peer Port\r\n        groupManager.addPeerGroup(req.name,[addr[0]])\r\n        group = groupManager.getGroup(req.name)\r\n        groupCpy = copy.copy(group)\r\n        del groupCpy.bundles\r\n        joinResponse = JoinResponse(groupCpy)\r\n        return pickle.dumps(joinResponse)\r\n\r\n    elif req.type == 2:\r\n        #Create The Request again for local use\r\n        req = SearchBundleRequest(req.groupID,req.keywords)\r\n        #Get All Bundles User has\r\n        bundlesOfGroup = groupManager.getGroupWithID(req.groupID).bundles\r\n        #Bundles to reply\r\n        responseBundles = []\r\n        for bundle in bundlesOfGroup:\r\n            #For each bundle make a single list (bundleKeywords) and search if any of the keywords other user send are in there then send back\r\n            name = bundle.name.split()\r\n            desc = bundle.description.split()\r\n            bundleKeywords = name + desc\r\n            if any(keyword in req.keywords for keyword in bundleKeywords):\r\n                responseBundles.append({\"id\":bundle.id,\"name\":bundle.name,\"description\":bundle.description})\r\n        #Create Response and return it to be used as answer\r\n        searchResponse = SearchBundleResponse(responseBundles)\r\n        return pickle.dumps(joinResponse)\r\n\r\ndef responseHandler(data, groupManager):\r\n    res = pickle.loads(data)\r\n\r\n    if res.type == 1:\r\n        res = JoinResponse(res.group)\r\n        # group = res.group\r\n        # group = Groups.Group(group.name,group.private,group.admins,group.peers,group.timestamp)\r\n        # groupManager.addGroup(group)\r\n        return res\r\n\r\n    elif res.type == 2:\r\n        res = SearchBundleResponse(res.responseBundles)\r\n        return res\r\n\r\ndef receiver(groupManager):\r\n    UDP_IP = '0.0.0.0'\r\n    UDP_PORT = 6700\r\n    sock = socket(AF_INET, SOCK_DGRAM)\r\n    sock.bind((UDP_IP, UDP_PORT))\r\n    print(\"Listening on \", UDP_IP, \":\", UDP_PORT)\r\n    while True:\r\n        #RECEIVE AND RESPOND.\r\n        data, addr = sock.recvfrom(65507)\r\n        print(addr,data)\r\n        response = requestHandler(data,addr,groupManager)\r\n        sock.sendto(response,addr)\r\n\r\ndef sendRequest(address, port, request,groupManager):\r\n    # Create a socket for sending files\r\n    clientSocket = socket(AF_INET, SOCK_DGRAM)\r\n    clientSocket.sendto(request, (address, port))\r\n    data, addr = clientSocket.recvfrom(65507)\r\n    return responseHandler(data, groupManager)\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Networking.py b/Networking.py
--- a/Networking.py	(revision f0294b2ecb648f959712af555b1864294106d67c)
+++ b/Networking.py	(date 1648481013611)
@@ -31,7 +31,7 @@
         self.keywords = keyword
 
 class SearchBundleResponse(Request):
-    def __init__(self,groups):
+    def __init__(self,responseBundles):
         super().__init__(2)
         self.responseBundles = responseBundles
 
@@ -65,7 +65,7 @@
                 responseBundles.append({"id":bundle.id,"name":bundle.name,"description":bundle.description})
         #Create Response and return it to be used as answer
         searchResponse = SearchBundleResponse(responseBundles)
-        return pickle.dumps(joinResponse)
+        return pickle.dumps(searchResponse)
 
 def responseHandler(data, groupManager):
     res = pickle.loads(data)
