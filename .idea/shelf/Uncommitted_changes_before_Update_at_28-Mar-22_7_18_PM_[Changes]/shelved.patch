Index: Networking.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import socket\r\nfrom socket import *\r\nimport pickle\r\nimport copy\r\nimport Groups\r\nfrom Groups import Group\r\n\r\n\r\nclass Request:\r\n    def __init__(self,type):\r\n        self.type = type\r\n\r\n    def toJSON(self):\r\n        return json.dumps(self.__dict__)\r\n\r\nclass JoinRequest(Request):\r\n    def __init__(self,name,timestamp):\r\n        super().__init__(1)\r\n        self.name = name\r\n        self.timestamp = timestamp\r\n\r\nclass JoinResponse(Request):\r\n    def __init__(self,group):\r\n        super().__init__(1)\r\n        self.group = group\r\n\r\nclass SearchBundleRequest(Request):\r\n    def __init__(self, groupId, keyword):\r\n        super().__init__(2)\r\n        self.groupID = groupId\r\n        self.keywords = keyword\r\n\r\nclass SearchBundleResponse(Request):\r\n    def __init__(self,groups):\r\n        super().__init__(2)\r\n        self.responseBundles = groups\r\n\r\ndef requestHandler(data, addr, groupManager: Groups.GroupManager):\r\n    req = pickle.loads(data)\r\n    # Response to JoinRequest\r\n    if req.type == 1:\r\n        req = JoinRequest(req.name,req.timestamp)\r\n        #TODO If this is allowed add peer and respond\r\n        #TODO Peer Port\r\n        groupManager.addPeerGroup(req.name,[addr[0]])\r\n        group = groupManager.getGroup(req.name)\r\n        groupCpy = copy.copy(group)\r\n        del groupCpy.bundles\r\n        joinResponse = JoinResponse(groupCpy)\r\n        return pickle.dumps(joinResponse)\r\n\r\n    elif req.type == 2:\r\n        #Create The Request again for local use\r\n        req = SearchBundleRequest(req.groupID,req.keywords)\r\n        #Get All Bundles User has\r\n        bundlesOfGroup = groupManager.getGroupWithID(req.groupID).bundles\r\n        #Bundles to reply\r\n        responseBundles = []\r\n        for bundle in bundlesOfGroup:\r\n            #For each bundle make a single list (bundleKeywords) and search if any of the keywords other user send are in there then send back\r\n            name = bundle.name.split()\r\n            desc = bundle.description.split()\r\n            bundleKeywords = name + desc\r\n            if any(keyword in req.keywords for keyword in bundleKeywords):\r\n                responseBundles.append({\"id\":bundle.id,\"name\":bundle.name,\"description\":bundle.description})\r\n        #Create Response and return it to be used as answer\r\n        searchResponse = SearchBundleResponse(responseBundles)\r\n        return addr,pickle.dumps(searchResponse)\r\n\r\ndef responseHandler(data, groupManager):\r\n    res = pickle.loads(data)\r\n\r\n    if res.type == 1:\r\n        res = JoinResponse(res.group)\r\n        return res\r\n\r\n    elif res.type == 2:\r\n        res = SearchBundleResponse(res.responseBundles)\r\n        return res\r\n\r\ndef receiver(groupManager):\r\n    UDP_IP = '0.0.0.0'\r\n    UDP_PORT = 6700\r\n    sock = socket(AF_INET, SOCK_DGRAM)\r\n    sock.bind((UDP_IP, UDP_PORT))\r\n    print(\"Listening on \", UDP_IP, \":\", UDP_PORT)\r\n    while True:\r\n        #RECEIVE AND RESPOND.\r\n        data, addr = sock.recvfrom(65507)\r\n        print(addr,data)\r\n        response = requestHandler(data,addr,groupManager)\r\n        sock.sendto(response,addr)\r\n\r\ndef sendRequest(address, port, request,groupManager):\r\n    # Create a socket for sending files\r\n    clientSocket = socket(AF_INET, SOCK_DGRAM)\r\n    clientSocket.settimeout(1)\r\n    try:\r\n        clientSocket.sendto(request, (address, port))\r\n        data, addr = clientSocket.recvfrom(65507)\r\n        res =  responseHandler(data, addr, groupManager)\r\n    #TODO except socket.timeout\r\n    #TODO for better exception handling fix later.\r\n    except:\r\n        return False\r\n\r\n\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Networking.py b/Networking.py
--- a/Networking.py	(revision eb1af266a92df274ea941fc2d7650a768d83cbcb)
+++ b/Networking.py	(date 1648483944905)
@@ -101,7 +101,8 @@
         res =  responseHandler(data, addr, groupManager)
     #TODO except socket.timeout
     #TODO for better exception handling fix later.
-    except:
+    except Exception as e:
+        print(e)
         return False
 
 
