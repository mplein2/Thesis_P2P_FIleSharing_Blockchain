Index: Networking.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import socket\r\nfrom socket import *\r\nimport pickle\r\n\r\nimport Groups\r\n\r\n\r\nclass Request:\r\n    def __init__(self,type):\r\n        self.type = type\r\n\r\n    def toJSON(self):\r\n        return json.dumps(self.__dict__)\r\n\r\nclass JoinRequest(Request):\r\n    def __init__(self,name,timestamp):\r\n        super().__init__(1)\r\n        self.name = name\r\n        self.timestamp = timestamp\r\n\r\nclass JoinResponse(Request):\r\n    def __init__(self,group):\r\n        super().__init__(1)\r\n        self.group = group\r\n\r\ndef requestHandler(data,addr,groupManager):\r\n    req = pickle.loads(data)\r\n    # Response to JoinRequest\r\n    if req.type == 1:\r\n        req = JoinRequest(req.name,req.timestamp)\r\n        #TODO If this is allowed add peer and respond\r\n        #TODO Peer Port\r\n        groupManager.addPeerGroup(req.name,[addr[0]])\r\n        group = groupManager.getGroup(req.name)\r\n        return pickle.dumps(JoinResponse(group))\r\n\r\n\r\ndef receiver(groupManager):\r\n    UDP_IP = '0.0.0.0'\r\n    UDP_PORT = 6700\r\n    sock = socket(AF_INET, SOCK_DGRAM)\r\n    sock.bind((UDP_IP, UDP_PORT))\r\n    print(\"Listening on \", UDP_IP, \":\", UDP_PORT)\r\n    while True:\r\n        #RECEIVE AND RESPOND.\r\n        data, addr = sock.recvfrom(65507)\r\n        print(addr,data)\r\n        response = requestHandler(data,addr,groupManager)\r\n        sock.sendto(response,addr)\r\n\r\ndef sendRequest(address, port, request,groupManager):\r\n    # Create a socket for sending files\r\n    clientSocket = socket(AF_INET, SOCK_DGRAM)\r\n    clientSocket.sendto(request, (address, port))\r\n    data, addr = clientSocket.recvfrom(65507)\r\n    responseHandler(data, groupManager)\r\n\r\ndef responseHandler(data, groupManager):\r\n    res = pickle.loads(data)\r\n    if res.type == 1:\r\n        res = JoinResponse(res.group)\r\n        group = res.group\r\n        group = Groups.Group(group.name,group.private,group.admins,group.peers,group.timestamp)\r\n        groupManager.addGroup(group)\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Networking.py b/Networking.py
--- a/Networking.py	(revision ab00bc1ff0d34c4135e74773e70cb04511a4b41c)
+++ b/Networking.py	(date 1648291091876)
@@ -6,31 +6,34 @@
 
 
 class Request:
-    def __init__(self,type):
+    def __init__(self, type):
         self.type = type
 
     def toJSON(self):
         return json.dumps(self.__dict__)
 
+
 class JoinRequest(Request):
-    def __init__(self,name,timestamp):
+    def __init__(self, name, timestamp):
         super().__init__(1)
         self.name = name
         self.timestamp = timestamp
 
+
 class JoinResponse(Request):
-    def __init__(self,group):
+    def __init__(self, group):
         super().__init__(1)
         self.group = group
 
-def requestHandler(data,addr,groupManager):
+
+def requestHandler(data, addr, groupManager):
     req = pickle.loads(data)
     # Response to JoinRequest
     if req.type == 1:
-        req = JoinRequest(req.name,req.timestamp)
-        #TODO If this is allowed add peer and respond
-        #TODO Peer Port
-        groupManager.addPeerGroup(req.name,[addr[0]])
+        req = JoinRequest(req.name, req.timestamp)
+        # TODO If this is allowed add peer and respond
+        # TODO Peer Port
+        groupManager.addPeerGroup(req.name, [addr[0]])
         group = groupManager.getGroup(req.name)
         return pickle.dumps(JoinResponse(group))
 
@@ -42,24 +45,25 @@
     sock.bind((UDP_IP, UDP_PORT))
     print("Listening on ", UDP_IP, ":", UDP_PORT)
     while True:
-        #RECEIVE AND RESPOND.
+        # RECEIVE AND RESPOND.
         data, addr = sock.recvfrom(65507)
-        print(addr,data)
-        response = requestHandler(data,addr,groupManager)
-        sock.sendto(response,addr)
+        print(addr, data)
+        response = requestHandler(data, addr, groupManager)
+        sock.sendto(response, addr)
 
-def sendRequest(address, port, request,groupManager):
+
+def sendRequest(address, port, request, groupManager):
     # Create a socket for sending files
     clientSocket = socket(AF_INET, SOCK_DGRAM)
     clientSocket.sendto(request, (address, port))
     data, addr = clientSocket.recvfrom(65507)
     responseHandler(data, groupManager)
 
+
 def responseHandler(data, groupManager):
     res = pickle.loads(data)
     if res.type == 1:
         res = JoinResponse(res.group)
         group = res.group
-        group = Groups.Group(group.name,group.private,group.admins,group.peers,group.timestamp)
+        group = Groups.Group(group.name, group.private, group.admins, group.peers, group.timestamp)
         groupManager.addGroup(group)
-
